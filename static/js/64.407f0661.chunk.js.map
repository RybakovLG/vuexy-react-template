{"version":3,"sources":["@core/components/card-actions/index.js","views/ui-elements/cards/actions/index.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","_useState","useState","_useState2","_slicedToArray","reload","setReload","_useState3","_useState4","collapse","setCollapse","_useState5","_useState6","visibility","setVisibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","UiLoader","_jsx","_objectSpread","blocking","_jsxs","Card","className","classnames","CardHeader","CardTitle","tag","Array","isArray","map","i","Tag","length","size","onClick","renderIcons","isOpen","Breadcrumbs","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","sm","CardAction","endLoading","setTimeout","CardBody","Table","responsive","bordered","md","CardText","BreadCrumbs","breadCrumbParent2","breadCrumbParent3","Breadcrumb","BreadcrumbItem","Link","to","active","UncontrolledButtonDropdown","DropdownToggle","color","Grid","DropdownMenu","end","DropdownItem","CheckSquare","MessageSquare","Mail","Calendar","UILoader","_classnames","loader","overlayColor","_defineProperty","style","backgroundColor","defaultProps","Spinner"],"mappings":"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","file":"static/js/64.407f0661.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport UiLoader from '@components/ui-loader'\r\nimport { ChevronDown, RotateCw, X } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardActions = props => {\r\n  // ** Props\r\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\r\n\r\n  // ** States\r\n  const [reload, setReload] = useState(false)\r\n  const [collapse, setCollapse] = useState(true)\r\n  const [visibility, setVisibility] = useState(true)\r\n\r\n  /**\r\n   ** If custom icon is defined then consider that else default icons\r\n   */\r\n  const Icons = {\r\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\r\n    remove: removeIcon ? removeIcon : X,\r\n    reload: reloadIcon ? reloadIcon : RotateCw\r\n  }\r\n\r\n  // ** Action to call\r\n  const callAction = action => {\r\n    switch (action) {\r\n      case 'collapse':\r\n        return setCollapse(!collapse)\r\n      case 'remove':\r\n        return setVisibility(false)\r\n      case 'reload':\r\n        return setReload(true)\r\n      default:\r\n    }\r\n  }\r\n\r\n  // ** Renders card actions\r\n  const renderIcons = () => {\r\n    /**\r\n     ** IF: user passes array of actions then loop through them & render all of the actions\r\n     ** ELSE: render single action\r\n     */\r\n\r\n    if (Array.isArray(actions)) {\r\n      return actions.map((action, i) => {\r\n        const Tag = Icons[action]\r\n        return (\r\n          <Tag\r\n            key={i}\r\n            className={classnames('cursor-pointer', {\r\n              'me-50': i < actions.length - 1\r\n            })}\r\n            size={15}\r\n            onClick={() => callAction(action)}\r\n          />\r\n        )\r\n      })\r\n    } else {\r\n      const Tag = Icons[actions]\r\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\r\n    }\r\n  }\r\n\r\n  // ** Ends reload\r\n  const removeReload = () => {\r\n    setReload(false)\r\n  }\r\n\r\n  // ** If user passes endReload function call it.\r\n  useEffect(() => {\r\n    if (reload) {\r\n      endReload(removeReload)\r\n    }\r\n  })\r\n\r\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\r\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\r\n\r\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\r\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\r\n\r\n  return (\r\n    <BlockUiWrapper\r\n      /*eslint-disable */\r\n      {...(actions === 'reload' || actions.includes('reload')\r\n        ? {\r\n            blocking: reload\r\n          }\r\n        : {})}\r\n      /*eslint-enable */\r\n    >\r\n      <Card\r\n        className={classnames('card-action', {\r\n          'd-none': !visibility\r\n        })}\r\n      >\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>{title}</CardTitle>\r\n          <div className='action-icons'>{renderIcons()}</div>\r\n        </CardHeader>\r\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\r\n          {children}\r\n        </CollapseWrapper>\r\n      </Card>\r\n    </BlockUiWrapper>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n\r\n// ** PropTypes\r\nCardActions.propTypes = {\r\n  removeIcon: PropTypes.any,\r\n  reloadIcon: PropTypes.any,\r\n  collapseIcon: PropTypes.any,\r\n  title: PropTypes.string.isRequired,\r\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\r\n  endReload(props) {\r\n    // ** User passes reload action and doesn't pass endReload then return Error\r\n    if (\r\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\r\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\r\n    ) {\r\n      return new Error('Please provide a function to end reload!')\r\n    }\r\n  }\r\n}\r\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport Breadcrumbs from '@components/breadcrumbs'\nimport CardAction from '@components/card-actions'\n\n// ** Icons Imports\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { CardBody, CardText, Row, Col, Table } from 'reactstrap'\n\nconst CardActions = () => {\n  return (\n    <Fragment>\n      <Breadcrumbs breadCrumbTitle='Card Actions' breadCrumbParent='Card' breadCrumbActive='Card Actions' />\n      <Row>\n        <Col sm='12'>\n          <CardAction\n            title='Card Actions'\n            actions={['collapse', 'reload', 'remove']}\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <Table responsive bordered>\n                <thead>\n                  <tr>\n                    <th>Action</th>\n                    <th>Icon</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Collapse</td>\n                    <td className='text-center'>\n                      <ChevronDown className='collapse-icon' size={15} />\n                    </td>\n                    <td> Collapse card content using collapse action.</td>\n                  </tr>\n                  <tr>\n                    <td>Refresh Content</td>\n                    <td className='text-center'>\n                      <RotateCw size={15} />\n                    </td>\n                    <td>Refresh your card content using refresh action.</td>\n                  </tr>\n                  <tr>\n                    <td>Remove Card</td>\n                    <td className='text-center'>\n                      <X size={15} />\n                    </td>\n                    <td> Remove card from page using remove card action</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n      <Row>\n        <Col md='6' sm='12'>\n          <CardAction title='Collapse' actions='collapse'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can create a collapsible content by using our <code>CardAction</code> component and by passing prop{' '}\n                <code>actions='collapse'</code>.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <ChevronDown size={15} /> to see card collapse in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction\n            title='Reload'\n            actions='reload'\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <CardText>\n                To create a re-loadable card pass prop <code>actions='reload'</code> and pass prop{' '}\n                <code>endReload</code> to end the loading.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction title='Remove' actions='remove'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can add refresh content action to card by adding class <code>.card-reload</code> with your card tag,\n                and add conditional spinner into card body to show when card is refreshing.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default CardActions\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-start mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/todo'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport './ui-loader.scss'\r\n\r\nconst UILoader = props => {\r\n  const { children, blocking, loader, className, tag, overlayColor } = props\r\n\r\n  const Tag = tag\r\n\r\n  return (\r\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\r\n      {children}\r\n      {blocking ? (\r\n        <Fragment>\r\n          <div\r\n            className='overlay' /*eslint-disable */\r\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\r\n            /*eslint-enable */\r\n          ></div>\r\n          <div className='loader'>{loader}</div>\r\n        </Fragment>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default UILoader\r\n\r\nUILoader.defaultProps = {\r\n  tag: 'div',\r\n  blocking: false,\r\n  loader: <Spinner color='primary' />\r\n}\r\n\r\nUILoader.propTypes = {\r\n  tag: Proptypes.string,\r\n  loader: Proptypes.any,\r\n  className: Proptypes.string,\r\n  overlayColor: Proptypes.string,\r\n  blocking: Proptypes.bool.isRequired\r\n}\r\n"],"sourceRoot":""}
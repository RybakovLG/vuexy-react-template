{"version":3,"sources":["views/tables/data-tables/advance/TableServerSide.js","views/tables/data-tables/advance/TableAdvSearch.js","views/tables/data-tables/advance/index.js"],"names":["DataTableServerSide","dispatch","useDispatch","store","useSelector","state","dataTables","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","rowsPerPage","setRowsPerPage","_useState5","_useState6","searchValue","setSearchValue","useEffect","getData","page","perPage","q","_jsx","Fragment","children","_jsxs","Card","CardHeader","className","CardTitle","tag","Row","Col","sm","Label","for","Input","type","id","value","onChange","e","parseInt","target","handlePerPage","bsSize","DataTable","noHeader","pagination","paginationServer","columns","serverSideColumns","sortIcon","ChevronDown","size","paginationComponent","_jsx2","count","Math","ceil","total","ReactPaginate","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","selected","handlePagination","_defineProperty","data","filters","isFiltered","Object","keys","some","k","length","allData","slice","dataToRender","memo","DataTableAdvSearch","Picker","setPicker","searchName","setSearchName","searchPost","setSearchPost","_useState7","_useState8","searchCity","setSearchCity","_useState9","_useState10","_useState11","_useState12","searchEmail","setSearchEmail","_useState13","_useState14","searchSalary","setSearchSalary","_useState15","_useState16","filteredData","setFilteredData","CardBody","lg","md","placeholder","updatedData","filter","item","startsWith","full_name","toLowerCase","includes","_toConsumableArray","email","post","city","Flatpickr","options","mode","dateFormat","date","range","arr","map","i","Date","year","getFullYear","month","getMonth","toString","concat","day","getDate","push","start_date","getTime","handleDateFilter","salary","advSearchColumns","paginationPerPage","paginationDefaultPage","pageClassName","breakClassName","nextLinkClassName","pageLinkClassName","breakLinkClassName","previousLinkClassName","nextClassName","previousClassName","containerClassName","Tables","Breadcrumbs","breadCrumbTitle","breadCrumbParent","breadCrumbActive","TableServerSide","TableAdvSearch"],"mappings":"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","file":"static/js/153.1236acf5.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect, memo } from 'react'\r\n\r\n// ** Table Columns\r\nimport { serverSideColumns } from '../data'\r\n\r\n// ** Store & Actions\r\nimport { getData } from '../store'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport { ChevronDown } from 'react-feather'\r\nimport DataTable from 'react-data-table-component'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, Input, Label, Row, Col } from 'reactstrap'\r\n\r\nconst DataTableServerSide = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.dataTables)\r\n\r\n  // ** States\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [rowsPerPage, setRowsPerPage] = useState(7)\r\n  const [searchValue, setSearchValue] = useState('')\r\n\r\n  // ** Get data on mount\r\n  useEffect(() => {\r\n    dispatch(\r\n      getData({\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        q: searchValue\r\n      })\r\n    )\r\n  }, [dispatch])\r\n\r\n  // ** Function to handle filter\r\n  const handleFilter = e => {\r\n    setSearchValue(e.target.value)\r\n\r\n    dispatch(\r\n      getData({\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        q: e.target.value\r\n      })\r\n    )\r\n  }\r\n\r\n  // ** Function to handle Pagination and get data\r\n  const handlePagination = page => {\r\n    dispatch(\r\n      getData({\r\n        page: page.selected + 1,\r\n        perPage: rowsPerPage,\r\n        q: searchValue\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  // ** Function to handle per page\r\n  const handlePerPage = e => {\r\n    dispatch(\r\n      getData({\r\n        page: currentPage,\r\n        perPage: parseInt(e.target.value),\r\n        q: searchValue\r\n      })\r\n    )\r\n    setRowsPerPage(parseInt(e.target.value))\r\n  }\r\n\r\n  // ** Custom Pagination\r\n  const CustomPagination = () => {\r\n    const count = Math.ceil(store.total / rowsPerPage)\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={''}\r\n        nextLabel={''}\r\n        breakLabel='...'\r\n        pageCount={Math.ceil(count) || 1}\r\n        marginPagesDisplayed={2}\r\n        pageRangeDisplayed={2}\r\n        activeClassName='active'\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={page => handlePagination(page)}\r\n        activeClassName='active'\r\n        pageClassName='page-item'\r\n        breakClassName='page-item'\r\n        nextLinkClassName='page-link'\r\n        pageLinkClassName='page-link'\r\n        breakLinkClassName='page-link'\r\n        previousLinkClassName='page-link'\r\n        nextClassName='page-item next-item'\r\n        previousClassName='page-item prev-item'\r\n        containerClassName={\r\n          'pagination react-paginate separated-pagination pagination-sm justify-content-end pe-1 mt-1'\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  // ** Table data to render\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      q: searchValue\r\n    }\r\n\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n\r\n    if (store.data.length > 0) {\r\n      return store.data\r\n    } else if (store.data.length === 0 && isFiltered) {\r\n      return []\r\n    } else {\r\n      return store.allData.slice(0, rowsPerPage)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card>\r\n        <CardHeader className='border-bottom'>\r\n          <CardTitle tag='h4'>Server Side</CardTitle>\r\n        </CardHeader>\r\n        <Row className='mx-0 mt-1 mb-50'>\r\n          <Col sm='6'>\r\n            <div className='d-flex align-items-center'>\r\n              <Label for='sort-select'>show</Label>\r\n              <Input\r\n                className='dataTable-select'\r\n                type='select'\r\n                id='sort-select'\r\n                value={rowsPerPage}\r\n                onChange={e => handlePerPage(e)}\r\n              >\r\n                <option value={7}>7</option>\r\n                <option value={10}>10</option>\r\n                <option value={25}>25</option>\r\n                <option value={50}>50</option>\r\n                <option value={75}>75</option>\r\n                <option value={100}>100</option>\r\n              </Input>\r\n              <Label for='sort-select'>entries</Label>\r\n            </div>\r\n          </Col>\r\n          <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1' sm='6'>\r\n            <Label className='me-1' for='search-input'>\r\n              Search\r\n            </Label>\r\n            <Input\r\n              className='dataTable-filter'\r\n              type='text'\r\n              bsSize='sm'\r\n              id='search-input'\r\n              value={searchValue}\r\n              onChange={handleFilter}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <div className='react-dataTable'>\r\n          <DataTable\r\n            noHeader\r\n            pagination\r\n            paginationServer\r\n            className='react-dataTable'\r\n            columns={serverSideColumns}\r\n            sortIcon={<ChevronDown size={10} />}\r\n            paginationComponent={CustomPagination}\r\n            data={dataToRender()}\r\n          />\r\n        </div>\r\n      </Card>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default memo(DataTableServerSide)\r\n","// ** React Imports\r\nimport { useState, Fragment } from 'react'\r\n\r\n// ** Table Columns\r\nimport { data, advSearchColumns } from '../data'\r\n\r\n// ** Third Party Components\r\nimport Flatpickr from 'react-flatpickr'\r\nimport ReactPaginate from 'react-paginate'\r\nimport { ChevronDown } from 'react-feather'\r\nimport DataTable from 'react-data-table-component'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Input, Label, Row, Col } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\n\r\nconst DataTableAdvSearch = () => {\r\n  // ** States\r\n  const [Picker, setPicker] = useState('')\r\n  const [searchName, setSearchName] = useState('')\r\n  const [searchPost, setSearchPost] = useState('')\r\n  const [searchCity, setSearchCity] = useState('')\r\n  const [currentPage, setCurrentPage] = useState(0)\r\n  const [searchEmail, setSearchEmail] = useState('')\r\n  const [searchSalary, setSearchSalary] = useState('')\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  // ** Function to handle Pagination\r\n  const handlePagination = page => setCurrentPage(page.selected)\r\n\r\n  // ** Table data to render\r\n  const dataToRender = () => {\r\n    if (\r\n      searchName.length ||\r\n      searchPost.length ||\r\n      searchEmail.length ||\r\n      searchCity.length ||\r\n      searchSalary.length ||\r\n      Picker.length\r\n    ) {\r\n      return filteredData\r\n    } else {\r\n      return data\r\n    }\r\n  }\r\n\r\n  // ** Custom Pagination\r\n  const CustomPagination = () => (\r\n    <ReactPaginate\r\n      previousLabel={''}\r\n      nextLabel={''}\r\n      forcePage={currentPage}\r\n      onPageChange={page => handlePagination(page)}\r\n      pageCount={Math.ceil(dataToRender().length / 7) || 1}\r\n      breakLabel={'...'}\r\n      pageRangeDisplayed={2}\r\n      marginPagesDisplayed={2}\r\n      activeClassName='active'\r\n      pageClassName='page-item'\r\n      breakClassName='page-item'\r\n      nextLinkClassName='page-link'\r\n      pageLinkClassName='page-link'\r\n      breakLinkClassName='page-link'\r\n      previousLinkClassName='page-link'\r\n      nextClassName='page-item next-item'\r\n      previousClassName='page-item prev-item'\r\n      containerClassName={'pagination react-paginate separated-pagination pagination-sm justify-content-end pe-1 mt-1'}\r\n    />\r\n  )\r\n\r\n  // ** Function to handle name filter\r\n  const handleNameFilter = e => {\r\n    const value = e.target.value\r\n    let updatedData = []\r\n    const dataToFilter = () => {\r\n      if (searchEmail.length || searchPost.length || searchCity.length || searchSalary.length || Picker.length) {\r\n        return filteredData\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n\r\n    setSearchName(value)\r\n    if (value.length) {\r\n      updatedData = dataToFilter().filter(item => {\r\n        const startsWith = item.full_name.toLowerCase().startsWith(value.toLowerCase())\r\n\r\n        const includes = item.full_name.toLowerCase().includes(value.toLowerCase())\r\n\r\n        if (startsWith) {\r\n          return startsWith\r\n        } else if (!startsWith && includes) {\r\n          return includes\r\n        } else return null\r\n      })\r\n      setFilteredData([...updatedData])\r\n      setSearchName(value)\r\n    }\r\n  }\r\n\r\n  // ** Function to handle email filter\r\n  const handleEmailFilter = e => {\r\n    const value = e.target.value\r\n    let updatedData = []\r\n    const dataToFilter = () => {\r\n      if (searchName.length || searchPost.length || searchCity.length || searchSalary.length || Picker.length) {\r\n        return filteredData\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n\r\n    setSearchEmail(value)\r\n    if (value.length) {\r\n      updatedData = dataToFilter().filter(item => {\r\n        const startsWith = item.email.toLowerCase().startsWith(value.toLowerCase())\r\n\r\n        const includes = item.email.toLowerCase().includes(value.toLowerCase())\r\n\r\n        if (startsWith) {\r\n          return startsWith\r\n        } else if (!startsWith && includes) {\r\n          return includes\r\n        } else return null\r\n      })\r\n      setFilteredData([...updatedData])\r\n      setSearchEmail(value)\r\n    }\r\n  }\r\n\r\n  // ** Function to handle post filter\r\n  const handlePostFilter = e => {\r\n    const value = e.target.value\r\n    let updatedData = []\r\n    const dataToFilter = () => {\r\n      if (searchEmail.length || searchName.length || searchCity.length || searchSalary.length || Picker.length) {\r\n        return filteredData\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n\r\n    setSearchPost(value)\r\n    if (value.length) {\r\n      updatedData = dataToFilter().filter(item => {\r\n        const startsWith = item.post.toLowerCase().startsWith(value.toLowerCase())\r\n\r\n        const includes = item.post.toLowerCase().includes(value.toLowerCase())\r\n\r\n        if (startsWith) {\r\n          return startsWith\r\n        } else if (!startsWith && includes) {\r\n          return includes\r\n        } else return null\r\n      })\r\n      setFilteredData([...updatedData])\r\n      setSearchPost(value)\r\n    }\r\n  }\r\n\r\n  // ** Function to handle city filter\r\n  const handleCityFilter = e => {\r\n    const value = e.target.value\r\n    let updatedData = []\r\n    const dataToFilter = () => {\r\n      if (searchEmail.length || searchName.length || searchPost.length || searchSalary.length || Picker.length) {\r\n        return filteredData\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n\r\n    setSearchCity(value)\r\n    if (value.length) {\r\n      updatedData = dataToFilter().filter(item => {\r\n        const startsWith = item.city.toLowerCase().startsWith(value.toLowerCase())\r\n\r\n        const includes = item.city.toLowerCase().includes(value.toLowerCase())\r\n\r\n        if (startsWith) {\r\n          return startsWith\r\n        } else if (!startsWith && includes) {\r\n          return includes\r\n        } else return null\r\n      })\r\n      setFilteredData([...updatedData])\r\n      setSearchCity(value)\r\n    }\r\n  }\r\n\r\n  // ** Function to handle salary filter\r\n  const handleSalaryFilter = e => {\r\n    const value = e.target.value\r\n    let updatedData = []\r\n    const dataToFilter = () => {\r\n      if (searchEmail.length || searchName.length || searchPost.length || searchCity.length || Picker.length) {\r\n        return filteredData\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n\r\n    setSearchSalary(value)\r\n    if (value.length) {\r\n      updatedData = dataToFilter().filter(item => {\r\n        const startsWith = item.salary.toLowerCase().startsWith(value.toLowerCase())\r\n\r\n        const includes = item.salary.toLowerCase().includes(value.toLowerCase())\r\n\r\n        if (startsWith) {\r\n          return startsWith\r\n        } else if (!startsWith && includes) {\r\n          return includes\r\n        } else return null\r\n      })\r\n      setFilteredData([...updatedData])\r\n      setSearchSalary(value)\r\n    }\r\n  }\r\n\r\n  // ** Function to handle date filter\r\n  const handleDateFilter = range => {\r\n    const arr = []\r\n    let updatedData = []\r\n    const dataToFilter = () => {\r\n      if (searchEmail.length || searchName.length || searchPost.length || searchCity.length || searchSalary.length) {\r\n        return filteredData\r\n      } else {\r\n        return data\r\n      }\r\n    }\r\n\r\n    range.map(i => {\r\n      const date = new Date(i)\r\n\r\n      const year = date.getFullYear()\r\n\r\n      let month = (1 + date.getMonth()).toString()\r\n      month = month.length > 1 ? month : `0${month}`\r\n\r\n      let day = date.getDate().toString()\r\n      day = day.length > 1 ? day : `0${day}`\r\n\r\n      arr.push(`${month}/${day}/${year}`)\r\n      return true\r\n    })\r\n\r\n    setPicker(range)\r\n\r\n    if (range.length) {\r\n      updatedData = dataToFilter().filter(item => {\r\n        return (\r\n          new Date(item.start_date).getTime() >= new Date(arr[0]).getTime() &&\r\n          new Date(item.start_date).getTime() <= new Date(arr[1]).getTime()\r\n        )\r\n      })\r\n      setFilteredData([...updatedData])\r\n      setPicker(range)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card>\r\n        <CardHeader className='border-bottom'>\r\n          <CardTitle tag='h4'>Advance Search</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row className='mt-1 mb-50'>\r\n            <Col lg='4' md='6' className='mb-1'>\r\n              <Label className='form-label' for='name'>\r\n                Name:\r\n              </Label>\r\n              <Input id='name' placeholder='Bruce Wayne' value={searchName} onChange={handleNameFilter} />\r\n            </Col>\r\n            <Col lg='4' md='6' className='mb-1'>\r\n              <Label className='form-label' for='email'>\r\n                Email:\r\n              </Label>\r\n              <Input\r\n                type='email'\r\n                id='email'\r\n                placeholder='Bwayne@email.com'\r\n                value={searchEmail}\r\n                onChange={handleEmailFilter}\r\n              />\r\n            </Col>\r\n            <Col lg='4' md='6' className='mb-1'>\r\n              <Label className='form-label' for='post'>\r\n                Post:\r\n              </Label>\r\n              <Input id='post' placeholder='Web Designer' value={searchPost} onChange={handlePostFilter} />\r\n            </Col>\r\n            <Col lg='4' md='6' className='mb-1'>\r\n              <Label className='form-label' for='city'>\r\n                City:\r\n              </Label>\r\n              <Input id='city' placeholder='San Diego' value={searchCity} onChange={handleCityFilter} />\r\n            </Col>\r\n            <Col lg='4' md='6' className='mb-1'>\r\n              <Label className='form-label' for='date'>\r\n                Date:\r\n              </Label>\r\n              <Flatpickr\r\n                className='form-control'\r\n                id='date'\r\n                value={Picker}\r\n                options={{ mode: 'range', dateFormat: 'm/d/Y' }}\r\n                onChange={date => handleDateFilter(date)}\r\n              />\r\n            </Col>\r\n            <Col lg='4' md='6' className='mb-1'>\r\n              <Label className='form-label' for='salary'>\r\n                Salary:\r\n              </Label>\r\n              <Input id='salary' placeholder='10000' value={searchSalary} onChange={handleSalaryFilter} />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n        <div className='react-dataTable'>\r\n          <DataTable\r\n            noHeader\r\n            pagination\r\n            columns={advSearchColumns}\r\n            paginationPerPage={7}\r\n            className='react-dataTable'\r\n            sortIcon={<ChevronDown size={10} />}\r\n            paginationDefaultPage={currentPage + 1}\r\n            paginationComponent={CustomPagination}\r\n            data={dataToRender()}\r\n          />\r\n        </div>\r\n      </Card>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DataTableAdvSearch\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\n\r\n// ** Third Party Components\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Demo Components\r\nimport TableServerSide from './TableServerSide'\r\nimport TableAdvSearch from './TableAdvSearch'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\r\n\r\nconst Tables = () => {\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs breadCrumbTitle='Datatables' breadCrumbParent='Home' breadCrumbActive='Datatables Advance' />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <TableServerSide />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <TableAdvSearch />\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Tables\r\n"],"sourceRoot":""}
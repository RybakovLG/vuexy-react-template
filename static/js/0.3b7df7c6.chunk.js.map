{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","isNameInFieldArray","names","name","_toConsumableArray","some","current","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","omit","source","copy","Object","assign","HookFormContext","React","useFormContext","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","arguments","length","createGetter","prop","defineProperty","isEmptyObject","keys","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","_ref","props","disabled","subject","subscribe","next","callback","useSubscribe","_updateSubscription","skipEarlySubscription","useController","methods","_props$control","control","shouldUnregister","_React$useState3","_formValues","_defaultValues","_React$useState4","_slicedToArray","setInputStateValue","_ref2","_ref2$control","_React$useState","_formState","_React$useState2","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_subjects","state","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_names","array","_stateFlags","action","unregister","event","target","checked","getControllerValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","_defineProperty","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","_step","_iterator","_createForOfIteratorHelper","s","n","done","refs","err","e","f","isFunction","cloneObject","Set","createSubject","_observers","observers","_i2","_observers2","observer","subscription","tearDowns","add","push","_i","_tearDowns","teardown","createSubscription","subscriber","closed","createSubscriber","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","_i3","_keys","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","isString","isWeb","window","document","live","contains","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","defaultResult","validResult","getCheckboxValue","options","option","map","attributes","getFieldValueAs","_ref6","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","_ref7","getResolverOptions","criteriaMode","shouldUseNativeValidation","_step4","_iterator4","hasValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","_ref8","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputValue","_field$_f","inputRef","setCustomValidty","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","_ref9","exceedMax","exceedMin","maxOutput","minOutput","valueNumber","valueDate","maxLengthOutput","minLengthOutput","_exceedMax","_exceedMin","_getValueAndMessage","patternValue","_message","validateError","validationResult","_validateError","wrap","_context","prev","abrupt","bind","maxLengthMessage","minLengthMessage","maxType","minType","parseFloat","match","sent","t0","t1","t2","t3","t4","t5","stop","_x","_x2","_x3","_x4","apply","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","_len","args","_key","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","_ref10","_callee2","shouldSkipRender","_context2","resolver","_executeSchema","executeBuildInValidation","_x5","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","shouldRenderByError","_ref11","_callee3","previousFieldError","shouldUpdateValid","updatedFormState","_context3","delayError","_x6","_x7","_x8","_x9","_x10","_ref12","_callee4","_context4","context","_x11","executeSchemaAndUpdateState","_ref13","_callee5","_yield$_executeSchema","_iterator5","_step5","_name2","_error","_context5","_x12","_ref14","_callee6","shouldOnlyCheckValid","_name3","fieldReference","fieldError","_args6","_context6","valid","_x13","_x14","getValues","_getWatch","isGlobal","fieldValues","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","concat","handleChange","_ref16","_callee7","_error2","shouldSkipValidation","isWatched","_yield$_executeSchema2","previousErrorLookupResult","errorLookupResult","_context7","deps","_x15","_ref17","_callee9","fieldNames","_args9","_context9","Promise","_ref18","_callee8","_context8","_x17","shouldFocus","_x16","_step7","_iterator7","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","_ref20","_x18","toString","fieldRef","querySelectorAll","_removeUnmounted","_step6","_iterator6","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","_ref21","_callee10","hasNoPromiseError","_yield$_executeSchema3","_context10","preventDefault","persist","finish","_x19","info","setValue","isFieldArray","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","_step8","_iterator8","closest","keepSubmitCount","keepIsSubmitted","entries","_ref22","_ref23","keepErrors","clearErrors","inputName","setError","setFocus","useForm","_formControl","_React$useState7","_React$useState8"],"mappings":"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","file":"static/js/0.3b7df7c6.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}
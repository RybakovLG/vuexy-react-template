{"version":3,"sources":["views/components/spinners/SpinnerFlex.js","views/components/spinners/SpinnerFloat.js","views/components/spinners/SpinnerSizes.js","views/components/spinners/SpinnerGrowing.js","views/components/spinners/SpinnerBorder.js","views/components/spinners/SpinnerColors.js","views/components/spinners/SpinnerButtons.js","views/components/spinners/SpinnerGrowingColored.js","views/components/spinners/SpinnerTextAlignment.js","views/components/spinners/SpinnerSourceCode.js","views/components/spinners/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["SpinnerFlex","_jsxs","Fragment","children","_jsx","className","Spinner","SpinnerFloat","SpinnerSizes","size","type","style","height","width","SpinnerGrowing","SpinnerBorder","SpinnerColors","color","SpinnerButton","Button","outline","disabled","SpinnerGrowColors","SpinnerTextAlignment","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","Spinners","useEffect","Prism","highlightAll","BreadCrumbs","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","md","sm","Card","title","code","CardText","SpinnerGrow","SpinnerButtons","props","breadCrumbParent2","breadCrumbParent3","Breadcrumb","BreadcrumbItem","tag","Link","to","active","UncontrolledButtonDropdown","DropdownToggle","Grid","DropdownMenu","end","DropdownItem","CheckSquare","MessageSquare","Mail","Calendar","CardSnippet","noBody","iconCode","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","IconCode","Code","Wrapper","CardBody","CardHeader","CardTitle","onClick","Collapse"],"mappings":"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","file":"static/js/112.f4019f72.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFlex = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className='d-flex justify-content-center my-1'>\r\n        <Spinner />\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <strong>Loading...</strong>\r\n        <Spinner />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default SpinnerFlex\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFloat = () => {\r\n  return <Spinner className='float-end mb-2' />\r\n}\r\nexport default SpinnerFloat\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerSizes = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Spinner className='me-25' size='sm' />\r\n        <Spinner type='grow' size='sm' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' />\r\n        <Spinner type='grow' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' style={{ height: '3rem', width: '3rem' }} />\r\n        <Spinner type='grow' style={{ height: '3rem', width: '3rem' }} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerSizes\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowing = () => {\r\n  return <Spinner type='grow' />\r\n}\r\nexport default SpinnerGrowing\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerBorder = () => {\r\n  return <Spinner />\r\n}\r\nexport default SpinnerBorder\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerColors = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Spinner color='primary' />\r\n      <Spinner color='secondary' />\r\n      <Spinner color='success' />\r\n      <Spinner color='danger' />\r\n      <Spinner color='warning' />\r\n      <Spinner color='info' />\r\n      <Spinner color='light' />\r\n      <Spinner color='dark' />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerColors\r\n","// ** Reactstrap Imports\r\nimport { Button, Spinner } from 'reactstrap'\r\n\r\nconst SpinnerButton = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' />\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' type='grow' />\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' type='grow' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerButton\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowColors = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Spinner type='grow' color='primary' />\r\n      <Spinner type='grow' color='secondary' />\r\n      <Spinner type='grow' color='success' />\r\n      <Spinner type='grow' color='danger' />\r\n      <Spinner type='grow' color='warning' />\r\n      <Spinner type='grow' color='info' />\r\n      <Spinner type='grow' color='light' />\r\n      <Spinner type='grow' color='dark' />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerGrowColors\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerTextAlignment = () => {\r\n  return (\r\n    <div className='text-center'>\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerTextAlignment\r\n","export const spinnerBorder = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerBorder = () => {\r\n  return <Spinner />\r\n}\r\nexport default SpinnerBorder\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerColors = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerColors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner color='primary' />\r\n      <Spinner color='secondary' />\r\n      <Spinner color='success' />\r\n      <Spinner color='danger' />\r\n      <Spinner color='warning' />\r\n      <Spinner color='info' />\r\n      <Spinner color='light' />\r\n      <Spinner color='dark' />\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerColors\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowing = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowing = () => {\r\n  return <Spinner type='grow' color='primary' />\r\n}\r\nexport default SpinnerGrowing\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowColors = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowColors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner type='grow' color='primary' />\r\n      <Spinner type='grow' color='secondary' />\r\n      <Spinner type='grow' color='success' />\r\n      <Spinner type='grow' color='danger' />\r\n      <Spinner type='grow' color='warning' />\r\n      <Spinner type='grow' color='info' />\r\n      <Spinner type='grow' color='light' />\r\n      <Spinner type='grow' color='dark' />\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerGrowColors`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFlex = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFlex = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className='d-flex justify-content-center my-1'>\r\n        <Spinner />\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <strong>Loading...</strong>\r\n        <Spinner />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerFlex\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFloat = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFloat = () => {\r\n  return <Spinner className='float-end mb-2' />\r\n}\r\nexport default SpinnerFloat\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerTextAlignment = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerTextAlignment = () => {\r\n  return (\r\n    <div className='text-center'>\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerTextAlignment\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerSizes = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerSizes = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Spinner className='me-25' size='sm' />\r\n        <Spinner type='grow' size='sm' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' />\r\n        <Spinner type='grow' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' size='lg' />\r\n        <Spinner type='grow' size='lg' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerSizes\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerButton = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Button, Spinner } from 'reactstrap'\r\n\r\nconst SpinnerButton = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' />\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' type='grow' />\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' type='grow' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerButton\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n","// ** React Imports\r\nimport { Fragment, useEffect } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardText } from 'reactstrap'\r\n\r\n// ** Third Party Components\r\nimport Prism from 'prismjs'\r\n\r\n// ** Custom Components\r\nimport Card from '@components/card-snippet'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\n// ** Demo Components\r\nimport SpinnerFlex from './SpinnerFlex'\r\nimport SpinnerFloat from './SpinnerFloat'\r\nimport SpinnerSizes from './SpinnerSizes'\r\nimport SpinnerGrow from './SpinnerGrowing'\r\nimport SpinnerBorder from './SpinnerBorder'\r\nimport SpinnerColors from './SpinnerColors'\r\nimport SpinnerButtons from './SpinnerButtons'\r\nimport SpinnerGrowColors from './SpinnerGrowingColored'\r\nimport SpinnerTextAlignment from './SpinnerTextAlignment'\r\n\r\n// ** Source Code\r\nimport {\r\n  spinnerFlex,\r\n  spinnerFloat,\r\n  spinnerSizes,\r\n  spinnerBorder,\r\n  spinnerButton,\r\n  spinnerColors,\r\n  spinnerGrowing,\r\n  spinnerGrowColors,\r\n  spinnerTextAlignment\r\n} from './SpinnerSourceCode'\r\n\r\nconst Spinners = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs breadCrumbTitle='Spinners' breadCrumbParent='Components' breadCrumbActive='Spinners' />\r\n      <Row className='match-height'>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Border Spinner' code={spinnerBorder}>\r\n            <CardText>\r\n              Use <code>Spinner</code> tag to create a bordered spinner.\r\n            </CardText>\r\n            <SpinnerBorder />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Colors' code={spinnerColors}>\r\n            <CardText className='mb-0'>\r\n              Use <code>color</code> attribute to create a colored spinner.\r\n            </CardText>\r\n            <SpinnerColors />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Growing Spinner' code={spinnerGrowing}>\r\n            <CardText>\r\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing spinner.\r\n            </CardText>\r\n            <SpinnerGrow />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Colored Growing Spinners' code={spinnerGrowColors}>\r\n            <CardText className='mb-0'>\r\n              Use <code>color</code> and <code>type</code> attribute to create a colored growing spinner.\r\n            </CardText>\r\n            <SpinnerGrowColors />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Flex' code={spinnerFlex}>\r\n            <CardText>\r\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code> and <code>.justify-content-[side]</code>.\r\n            </CardText>\r\n            <SpinnerFlex />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Float' code={spinnerFloat}>\r\n            <CardText>\r\n              Use <code>.float-[side]</code> with spinner tag to change spinner's position.\r\n            </CardText>\r\n            <SpinnerFloat />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Text Alignment' code={spinnerTextAlignment}>\r\n            <CardText>\r\n              You can also use <code>.text-[side]</code> as a wrapper to spinner tag to change spinner's position.\r\n            </CardText>\r\n            <SpinnerTextAlignment />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Sizes' code={spinnerSizes}>\r\n            <CardText className='mb-0'>\r\n              Use prop <code>size=\"sm\"</code> for Small spinner or use <code>style</code> prop for custom size.\r\n            </CardText>\r\n            <SpinnerSizes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Buttons' code={spinnerButton}>\r\n            <SpinnerButtons />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Spinners\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-start mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/todo'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Code } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardSnippet = props => {\r\n  // ** Props\r\n  const { title, children, noBody, code, iconCode } = props\r\n\r\n  // ** State\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  // ** If user passes custom icon then render that else render default icon\r\n  const IconCode = iconCode ? iconCode : <Code size={15} />\r\n\r\n  // ** To toggle collapse\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\r\n  const Wrapper = noBody ? Fragment : CardBody\r\n\r\n  return (\r\n    <Card className='card-snippet'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        <div className='views cursor-pointer' onClick={toggle}>\r\n          {IconCode}\r\n        </div>\r\n      </CardHeader>\r\n      <Wrapper>{children}</Wrapper>\r\n      <Collapse isOpen={isOpen}>\r\n        <CardBody>{code}</CardBody>\r\n      </Collapse>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardSnippet\r\n\r\n// ** PropTypes\r\nCardSnippet.propTypes = {\r\n  code: PropTypes.node,\r\n  noBody: PropTypes.bool,\r\n  children: PropTypes.any,\r\n  iconCode: PropTypes.node,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}